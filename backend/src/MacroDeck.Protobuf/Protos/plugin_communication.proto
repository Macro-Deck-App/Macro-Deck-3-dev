syntax = "proto3";

package macrodeck.plugin;

option csharp_namespace = "MacroDeck.Protobuf";

// Base message envelope
message PluginMessage {
  string message_id = 1;
  MessageType message_type = 2;
  bytes payload = 3;
  string plugin_id = 4;
}

enum MessageType {
  UNKNOWN = 0;
  
  // Connection management
  CONNECT = 1;
  CONNECT_RESPONSE = 2;
  DISCONNECT = 3;
  HEARTBEAT = 4;
  
  // Plugin registration
  REGISTER_PLUGIN = 5;
  REGISTER_PLUGIN_RESPONSE = 6;
  
  // Action invocation
  INVOKE_ACTION = 7;
  INVOKE_ACTION_RESPONSE = 8;
  
  // Logging
  LOG_MESSAGE = 9;
  
  // Key exchange for encryption
  KEY_EXCHANGE = 10;
  KEY_EXCHANGE_RESPONSE = 11;
}

// Connection messages
message ConnectMessage {
  string plugin_id = 1;
  string plugin_name = 2;
  string plugin_version = 3;
  string sdk_version = 4;
}

message ConnectResponseMessage {
  bool success = 1;
  string message = 2;
  string session_id = 3;
  bytes public_key = 4; // Server's public key for encryption
}

message DisconnectMessage {
  string reason = 1;
}

message HeartbeatMessage {
  int64 timestamp = 1;
}

// Plugin registration
message RegisterPluginMessage {
  repeated ActionDefinition actions = 1;
}

message RegisterPluginResponseMessage {
  bool success = 1;
  string message = 2;
}

message ActionDefinition {
  string action_id = 1;
  string action_name = 2;
  string description = 3;
  repeated ConfigurationField configuration_fields = 4;
}

message ConfigurationField {
  string field_name = 1;
  string field_type = 2;
  bool required = 3;
  string default_value = 4;
}

// Action invocation
message InvokeActionMessage {
  string action_id = 1;
  string configuration_json = 2; // JSON serialized configuration
}

message InvokeActionResponseMessage {
  bool success = 1;
  string message = 2;
  string result_json = 3; // JSON serialized result if any
}

// Logging
message LogMessage {
  LogLevel level = 1;
  string message = 2;
  string category = 3;
  int64 timestamp = 4;
  string exception_json = 5; // JSON serialized exception if any
}

enum LogLevel {
  TRACE = 0;
  DEBUG = 1;
  INFORMATION = 2;
  WARNING = 3;
  ERROR = 4;
  CRITICAL = 5;
}

// Encryption key exchange
message KeyExchangeMessage {
  bytes public_key = 1;
  string key_algorithm = 2; // e.g., "RSA", "ECDH"
}

message KeyExchangeResponseMessage {
  bytes public_key = 1;
  bytes encrypted_session_key = 2; // Session key encrypted with client's public key
}